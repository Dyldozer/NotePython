Thanks for sharing the image of your JSON structure! Now I can see the exact structure you're working with. Let me create a more accurate parser for your data:

```python
import json

def parse_channels_with_sdv_1(json_data):
    """
    Parse JSON and find all channels with sdv=1
    Returns a list of tuples: (parent_object_name, channel_name)
    """
    results = []
    data = json.loads(json_data)
    
    # Navigate to the vcn section where channels are stored
    if "dsg stats" in data and "ch_map" in data["dsg stats"] and "vcn" in data["dsg stats"]["ch_map"]:
        vcn = data["dsg stats"]["ch_map"]["vcn"]
        
        # Iterate through channel IDs (0001, 0002, etc.)
        for channel_id, channel_info in vcn.items():
            # Check if this channel has sdv=1
            if isinstance(channel_info, dict) and "sdv" in channel_info and channel_info["sdv"] == 1:
                if "name" in channel_info:
                    results.append((channel_id, channel_info["name"]))
    
    return results

def main():
    # You can load your JSON from a file
    try:
        with open('channels.json', 'r') as file:
            json_data = file.read()
            
        channels = parse_channels_with_sdv_1(json_data)
        
        if channels:
            print("Channels with sdv=1:")
            for channel_id, name in channels:
                print(f"Channel ID: {channel_id}, Name: {name}")
        else:
            print("No channels found with sdv=1")
            
    except FileNotFoundError:
        print("File not found. Please ensure 'channels.json' exists.")
    except json.JSONDecodeError as e:
        print(f"JSON parsing error: {e}")
    except Exception as e:
        print(f"Error processing JSON: {e}")
        
if __name__ == "__main__":
    main()
```

Based on your image, I can see that the structure is:
- "dsg stats" → "ch_map" → "vcn" → channel IDs (like "0001") → channel properties including "sdv" and "name"

This script now directly navigates to the "vcn" section and checks each channel for the "sdv" value. It returns a list of tuples with the channel ID and name for channels where "sdv" equals 1.
